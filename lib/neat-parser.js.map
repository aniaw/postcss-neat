{"version":3,"sources":["neat-parser.js"],"names":["require","options","ampInsertedNodes","atRules","neatGrid","fillParent","query","direction","media","omega","maxWidth","outerContainer","padding","pad","display","row","columns","containerColumns","shift","location","showGrid","spanColumns","unwrapAmp","nodeSelector","node","indexOf","name","selectors","map","selector","replace","join","getGlobalSelector","parent","type","params","applyRuleSetToNode","ruleSet","currentAtRule","console","log","Object","keys","forEach","prop","rule","extRule","postcss","globalSelector","insertAfter","mediaNestedRule","parse","JSON","stringify","append","insertBefore","value","plugin","opts","assign","neatCore","variables","root","walkAtRules","atRule","trim","split","remove"],"mappings":"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","file":"neat-parser.js","sourcesContent":["'use strict';\n\nrequire('babel-polyfill');\n\nimport postcss from 'postcss';\nimport neatCore from './core';\nimport neatGrid from './grid';\n\nlet options = {};\nlet ampInsertedNodes = {};\n\nconst atRules = {\n  'fill-parent' () {\n    return neatGrid.fillParent(options);\n  },\n  'omega' (query, direction, media) {\n    return neatGrid.omega(query, direction, options, media);\n  },\n  'outer-container' (maxWidth, media) {\n    return neatGrid.outerContainer(maxWidth, options, media);\n  },\n  'pad' (media, ...padding) {\n    return neatGrid.pad(padding, options, media);\n  },\n  'row' (display, media) {\n    return neatGrid.row(display, options, media );\n  },\n  'shift' (columns, containerColumns, media, direction) {\n    return neatGrid.shift(columns, containerColumns, direction, options, media);\n  },\n  'show-grid' (columns, containerColumns, media, location, direction) {\n    return neatGrid.showGrid(columns, containerColumns, location, direction, options, media);\n  },\n  'span-columns' (columns, containerColumns, display, media, direction) {\n    return neatGrid.spanColumns(columns, containerColumns, display, direction, options, media);\n  }\n};\n\nconst unwrapAmp = (nodeSelector, node) => {\n  if (nodeSelector.indexOf('&:') >= 0 && node.name !== 'media') {\n    return node.selectors.map((selector) => {\n      return nodeSelector.replace(/&/g, selector);\n    }).join(',');\n  }\n  return nodeSelector;\n};\n\nconst getGlobalSelector = (node) => {\n  if (node.parent && node.parent.type === 'atrule') {\n    return `${node.parent.name} ${node.parent.params} ${node.selector}`;\n  } else if (node.name === 'media') {\n    return getGlobalSelector(node.parent);\n  }\n  return node.selector;\n};\n\nconst applyRuleSetToNode = (ruleSet, node, currentAtRule) => {\n  \n  console.log('currentAtRule', currentAtRule);\n  console.log('atRule', atRules);\n  \n  Object.keys(ruleSet).forEach((prop) => {\n    let rule = ruleSet[prop];\n    if (typeof rule === 'object') {\n      if (node.name !== 'media') {\n        let extRule = postcss.rule({ selector: unwrapAmp(prop, node) });\n        applyRuleSetToNode(rule, extRule);\n\n        let globalSelector = getGlobalSelector(node);\n        node.parent.insertAfter(ampInsertedNodes[globalSelector] || node, extRule);\n        ampInsertedNodes[globalSelector] = extRule;\n      } else {\n        let mediaNestedRule = postcss.parse(`${prop} ${JSON.stringify(rule).replace(/\"/g, '')}`);\n        node.append(mediaNestedRule);\n      }\n    } else {\n      if (currentAtRule) {\n        node.insertBefore(currentAtRule, { prop, value: rule });\n      } else {\n        node.append({ prop, value: rule });\n      }\n    }\n  });\n};\n\nexport default postcss.plugin('postcss-neat', (opts) => {\n  options = Object.assign({}, neatCore.variables, opts);\n  return (root) => {\n    ampInsertedNodes = {};\n    root.walkAtRules(/^neat-/i, (rule) => {\n      let atRule = rule.name.trim().replace('neat-', '');\n      if (atRules[atRule]) {\n        let params = rule.params.trim() ? rule.params.trim().split(' ') : [];\n        let ruleSet = atRules[atRule](...params);\n        applyRuleSetToNode(ruleSet, rule.parent, rule);\n      }\n      rule.remove();\n    });\n  };\n});\n"],"sourceRoot":"/source/"}