{"version":3,"sources":["neat-parser.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;uBAIO,SAAS;;;;oBACR,QAAQ;;;;oBACR,QAAQ;;;;AAJ7B,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAM1B,IAAI,OAAO,GAAG,EAAE,CAAC;AACjB,IAAI,gBAAgB,GAAG,EAAE,CAAC;;AAE1B,IAAM,OAAO,GAAG;AACd,eAAa,EAAC,sBAAG;AACf,WAAO,kBAAS,UAAU,CAAC,OAAO,CAAC,CAAC;GACrC;AACD,SAAO,EAAC,eAAC,KAAK,EAAE,SAAS,EAAE;AACzB,WAAO,kBAAS,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;GAClD;AACD,mBAAiB,EAAC,wBAAC,QAAQ,EAAE;AAC3B,WAAO,kBAAS,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;GACnD;AACD,OAAK,EAAC,eAAa;sCAAT,OAAO;AAAP,aAAO;;;AACf,WAAO,kBAAS,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;GACvC;AACD,OAAK,EAAC,aAAC,OAAO,EAAE;AACd,WAAO,kBAAS,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;GACvC;AACD,SAAO,EAAC,eAAC,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE;AAC7C,WAAO,kBAAS,KAAK,CAAC,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;GACtE;AACD,aAAW,EAAC,kBAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,SAAS,EAAE;AAC3D,WAAO,kBAAS,QAAQ,CAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;GACnF;AACD,gBAAc,EAAC,qBAAC,OAAO,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE;AAC7D,WAAO,kBAAS,WAAW,CAAC,OAAO,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;GACrF;CACF,CAAC;;AAEF,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAI,YAAY,EAAE,IAAI,EAAK;AACxC,MAAI,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;AAC5D,WAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,QAAQ,EAAK;AACtC,aAAO,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC7C,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GACd;AACD,SAAO,YAAY,CAAC;CACrB,CAAC;;AAEF,IAAM,iBAAiB,GAAG,SAApB,iBAAiB;;;4BAAa;QAAT,IAAI;;;AAC7B,QAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AAChD,aAAU,IAAI,CAAC,MAAM,CAAC,IAAI,SAAI,IAAI,CAAC,MAAM,CAAC,MAAM,SAAI,IAAI,CAAC,QAAQ,CAAG;KACrE,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;WACP,IAAI,CAAC,MAAM;;;KACrC;AACD,WAAO,IAAI,CAAC,QAAQ,CAAC;GACtB;CAAA,CAAC;;AAEF,IAAM,kBAAkB,GAAG,SAArB,kBAAkB,CAAI,OAAO,EAAE,IAAI,EAAE,aAAa,EAAK;AAC3D,QAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;AACrC,QAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,QAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,UAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;AACzB,YAAI,OAAO,GAAG,qBAAQ,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;AAChE,0BAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;AAElC,YAAI,cAAc,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC7C,YAAI,CAAC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,IAAI,EAAE,OAAO,CAAC,CAAC;AAC3E,wBAAgB,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC;OAC5C,MAAM;AACL,YAAI,eAAe,GAAG,qBAAQ,KAAK,CAAI,IAAI,SAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAG,CAAC;AACzF,YAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;OAC9B;KACF,MAAM;AACL,UAAI,aAAa,EAAE;AACjB,YAAI,CAAC,YAAY,CAAC,aAAa,EAAE,EAAE,IAAI,EAAJ,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;OACzD,MAAM;AACL,YAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAJ,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;OACpC;KACF;GACF,CAAC,CAAC;CACJ,CAAC;;qBAEa,qBAAQ,MAAM,CAAC,cAAc,EAAE,UAAC,IAAI,EAAK;AACtD,SAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,kBAAS,SAAS,EAAE,IAAI,CAAC,CAAC;AACtD,SAAO,UAAC,IAAI,EAAK;AACf,oBAAgB,GAAG,EAAE,CAAC;AACtB,QAAI,CAAC,WAAW,CAAC,SAAS,EAAE,UAAC,IAAI,EAAK;AACpC,UAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACnD,UAAI,OAAO,CAAC,MAAM,CAAC,EAAE;AACnB,YAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AACrE,YAAI,OAAO,GAAG,OAAO,CAAC,MAAM,OAAC,CAAf,OAAO,qBAAY,MAAM,EAAC,CAAC;AACzC,0BAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;OAChD;AACD,UAAI,CAAC,MAAM,EAAE,CAAC;KACf,CAAC,CAAC;GACJ,CAAC;CACH,CAAC","file":"neat-parser.js","sourcesContent":["'use strict';\n\nrequire('babel/polyfill');\n\nimport postcss from 'postcss';\nimport neatCore from './core';\nimport neatGrid from './grid';\n\nlet options = {};\nlet ampInsertedNodes = {};\n\nconst atRules = {\n  'fill-parent' () {\n    return neatGrid.fillParent(options);\n  },\n  'omega' (query, direction) {\n    return neatGrid.omega(query, direction, options);\n  },\n  'outer-container' (maxWidth) {\n    return neatGrid.outerContainer(maxWidth, options);\n  },\n  'pad' (...padding) {\n    return neatGrid.pad(padding, options);\n  },\n  'row' (display) {\n    return neatGrid.row(display, options);\n  },\n  'shift' (columns, containerColumns, direction) {\n    return neatGrid.shift(columns, containerColumns, direction, options);\n  },\n  'show-grid' (columns, containerColumns, location, direction) {\n    return neatGrid.showGrid(columns, containerColumns, location, direction, options);\n  },\n  'span-columns' (columns, containerColumns, display, direction) {\n    return neatGrid.spanColumns(columns, containerColumns, display, direction, options);\n  }\n};\n\nconst unwrapAmp = (nodeSelector, node) => {\n  if (nodeSelector.indexOf('&:') >= 0 && node.name !== 'media') {\n    return node.selectors.map((selector) => {\n      return nodeSelector.replace(/&/g, selector);\n    }).join(',');\n  }\n  return nodeSelector;\n};\n\nconst getGlobalSelector = (node) => {\n  if (node.parent && node.parent.type === 'atrule') {\n    return `${node.parent.name} ${node.parent.params} ${node.selector}`;\n  } else if (node.name === 'media') {\n    return getGlobalSelector(node.parent);\n  }\n  return node.selector;\n};\n\nconst applyRuleSetToNode = (ruleSet, node, currentAtRule) => {\n  Object.keys(ruleSet).forEach((prop) => {\n    let rule = ruleSet[prop];\n    if (typeof rule === 'object') {\n      if (node.name !== 'media') {\n        let extRule = postcss.rule({ selector: unwrapAmp(prop, node) });\n        applyRuleSetToNode(rule, extRule);\n\n        let globalSelector = getGlobalSelector(node);\n        node.parent.insertAfter(ampInsertedNodes[globalSelector] || node, extRule);\n        ampInsertedNodes[globalSelector] = extRule;\n      } else {\n        let mediaNestedRule = postcss.parse(`${prop} ${JSON.stringify(rule).replace(/\"/g, '')}`);\n        node.append(mediaNestedRule);\n      }\n    } else {\n      if (currentAtRule) {\n        node.insertBefore(currentAtRule, { prop, value: rule });\n      } else {\n        node.append({ prop, value: rule });\n      }\n    }\n  });\n};\n\nexport default postcss.plugin('postcss-neat', (opts) => {\n  options = Object.assign({}, neatCore.variables, opts);\n  return (root) => {\n    ampInsertedNodes = {};\n    root.walkAtRules(/^neat-/i, (rule) => {\n      let atRule = rule.name.trim().replace('neat-', '');\n      if (atRules[atRule]) {\n        let params = rule.params.trim() ? rule.params.trim().split(' ') : [];\n        let ruleSet = atRules[atRule](...params);\n        applyRuleSetToNode(ruleSet, rule.parent, rule);\n      }\n      rule.remove();\n    });\n  };\n});\n"],"sourceRoot":"/source/"}