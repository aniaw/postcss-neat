{"version":3,"sources":["grid/show-grid.es6.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;kCAES,0BAA0B;;;;kCAC1B,0BAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4ChD,IAAM,aAAa,GAAG,SAAhB,aAAa,GAAmB;MAAf,MAAM,yDAAG,CAAC;;AAC/B,SAAO,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,UAAC,CAAC,EAAE,CAAC;WAAK,CAAC;GAAA,CAAC,CAAC;CACnD,CAAC;;AAEF,IAAI,QAAQ,GAAG,SAAX,QAAQ,CAAI,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAA0B;MAAxB,OAAO;;AAC3D,kBAAgB,GAAG,gBAAgB,IAAI,OAAO,CAAC,eAAe,CAAC;AAC/D,WAAS,GAAG,SAAS,IAAI,OAAO,CAAC,oBAAoB,CAAC;;AAEtD,MAAI,YAAY,GAAG,EAAE,gBAAgB,GAAG,OAAO,CAAA,AAAC,CAAC;AACjD,MAAI,UAAU,GAAG,gCAAU,YAAY,CAAC,SAAS,CAAC,CAAC;AACnD,MAAI,WAAW,GAAG,gCAAU,SAAS,CAAC,OAAO,EAAE,gBAAgB,EAAE,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;AACnH,MAAI,YAAY,GAAG,gCAAU,UAAU,CAAC,gBAAgB,EAAE,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;;AAE5G,MAAI,QAAQ,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,GAAG,EAAK;AAC/D,QAAI,UAAU,GAAG,WAAW,GAAG,GAAG,GAAG,YAAY,GAAG,GAAG,CAAC;AACxD,QAAI,QAAQ,GAAG,WAAW,IAAI,GAAG,GAAG,CAAC,CAAA,AAAC,GAAG,YAAY,GAAG,GAAG,CAAC;AAC5D,QAAI,UAAU,GAAG,QAAQ,CAAC;AAC1B,QAAI,QAAQ,GAAG,WAAW,IAAI,GAAG,GAAG,CAAC,CAAA,AAAC,GAAG,YAAY,IAAI,GAAG,GAAG,CAAC,CAAA,AAAC,CAAC;AAClE,QAAI,CAAC,IAAI,CAAI,OAAO,CAAC,cAAc,SAAI,gCAAU,UAAU,CAAC,UAAU,CAAC,UAAK,OAAO,CAAC,cAAc,SAAI,gCAAU,UAAU,CAAC,QAAQ,CAAC,CAAG,CAAC;AACxI,QAAI,GAAG,GAAG,YAAY,GAAG,CAAC,EAAE;AAC1B,UAAI,CAAC,IAAI,kBAAgB,gCAAU,UAAU,CAAC,UAAU,CAAC,sBAAiB,gCAAU,UAAU,CAAC,QAAQ,CAAC,CAAG,CAAC;KAC7G;AACD,WAAO,IAAI,CAAC;GACb,EAAE,CAAC,UAAU,CAAC,SAAS,KAAK,OAAO,GAAG,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC;;AAEhE,SAAO;AACL,aAAS,EAAE;AACT,kBAAY,uBAAqB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,MAAG;AACtD,cAAQ,EAAE,MAAM;AAChB,aAAO,EAAE,MAAM;KAChB;GACF,CAAC;CACH,CAAC;;qBAEa,QAAQ","file":"grid/show-grid.es6.js","sourcesContent":["'use strict';\n\nimport variables from '../core/variables.es6.js';\nimport functions from '../core/functions.es6.js';\n\n// Creates a debugging grid for the parent of columns. Works in conjunction with `@neat-outer-container`.\n//\n// @columns\n//   The unitless number of columns the element spans (required).\n//   `@columns` also accepts decimals for when it's necessary to break out of the standard grid.\n//   E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n//\n// @container-columns\n//   The number of columns the parent element spans. If is not passed, it is equal to `@neat-grid-columns`,\n//   the total number of columns in the grid.\n//\n// @example - PostCSS Usage\n//    .element {\n//      @neat-outer-container;\n//      @neat-show-grid 4 12;\n//    }\n//\n// @example - CSS Output\n//    .element {\n//      *zoom: 1;\n//      max-width: 128em;\n//      margin-left: auto;\n//      margin-right: auto;\n//    }\n//    .element:before,\n//    .element:after {\n//      content: \" \";\n//      display: table;\n//    }\n//    .element:after {\n//      clear: both;\n//      background: linear-gradient(to right,\n//        #ecf0f1 0, #ecf0f1 31.7615656%,\n//        transparent 31.7615656%, transparent 34.1192172%,\n//        #ecf0f1 34.1192172%, #ecf0f1 65.88078280%,\n//        transparent 65.88078280%, transparent 68.2384344%,\n//        #ecf0f1 68.2384344%, #ecf0f1 100%);\n//      height: 100%;\n//      width: 100%;\n//    }\n//\n\nconst generateArray = (length = 0) => {\n  return Array.from(new Array(length), (x, i) => i);\n};\n\nlet showGrid = (columns, containerColumns, direction, options = variables) => {\n  containerColumns = containerColumns || options.neatGridColumns;\n  direction = direction || options.neatDefaultDirection;\n\n  let columnsCount = +(containerColumns / columns);\n  let directions = functions.getDirection(direction);\n  let columnWidth = functions.flexWidth(columns, containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n  let columnGutter = functions.flexGutter(containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n\n  let gradient = generateArray(columnsCount).reduce((memo, idx) => {\n    let startColor = columnWidth * idx + columnGutter * idx;\n    let endColor = columnWidth * (idx + 1) + columnGutter * idx;\n    let startBlank = endColor;\n    let endBlank = columnWidth * (idx + 1) + columnGutter * (idx + 1);\n    memo.push(`${options.debugGridColor} ${functions.percentage(startColor)}, ${options.debugGridColor} ${functions.percentage(endColor)}`);\n    if (idx < columnsCount - 1) {\n      memo.push(`transparent ${functions.percentage(startBlank)}, transparent ${functions.percentage(endBlank)}`);\n    }\n    return memo;\n  }, [directions.direction === 'right' ? 'to right' : 'to left']);\n\n  return {\n    '&:after': {\n      'background': `linear-gradient(${gradient.join(',')})`,\n      'height': '100%',\n      'width': '100%'\n    }\n  };\n};\n\nexport default showGrid;\n"],"sourceRoot":"/source/"}