{"version":3,"sources":["grid/span-columns.es6.js"],"names":["spanColumns","columns","containerColumns","display","direction","options","variables","media","neatElementColumns","Media","Desktop","neatGridColumns","neatDefaultDisplay","neatDefaultDirection","neatColumnWidth","neatGutterWidth","directions","functions","getDirection","columnWidth","flexWidth","columnGutter","flexGutter","percentage","oppositeDirection"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,cAAc,SAAdA,WAAc,CAACC,OAAD,EAAUC,gBAAV,EAA4BC,OAA5B,EAAqCC,SAArC,EAA+E;AAAA,MAA/BC,OAA+B,uEAArBC,qBAAqB;AAAA,MAAVC,KAAU;;AAC/FN,YAAUA,YAAYM,QAAQF,QAAQE,KAAR,EAAeC,kBAAvB,GAA4CH,QAAQI,qBAAMC,OAAd,EAAuBF,kBAA/E,CAAV;AACAN,qBAAmBA,qBAAqBK,QAAQF,QAAQE,KAAR,EAAeI,eAAvB,GAAyCN,QAAQI,qBAAMC,OAAd,EAAuBC,eAArF,CAAnB;AACAR,YAAUA,YAAYI,QAAQF,QAAQE,KAAR,EAAeK,kBAAvB,GAA4CP,QAAQI,qBAAMC,OAAd,EAAuBE,kBAA/E,CAAV;AACAR,cAAYA,cAAcG,QAAQF,QAAQE,KAAR,EAAeM,oBAAvB,GAA8CR,QAAQI,qBAAMC,OAAd,EAAuBG,oBAAnF,CAAZ;;AAEA,MAAIC,kBAAmBP,QAAQF,QAAQE,KAAR,EAAeO,eAAvB,GAAyCT,QAAQI,qBAAMC,OAAd,EAAuBI,eAAvF;AACA,MAAIC,kBAAmBR,QAAQF,QAAQE,KAAR,EAAeQ,eAAvB,GAAyCV,QAAQI,qBAAMC,OAAd,EAAuBK,eAAvF;;AAEA,MAAIC,aAAaC,sBAAUC,YAAV,CAAuBd,SAAvB,CAAjB;AACA,MAAIe,cAAcF,sBAAUG,SAAV,CAAoBnB,OAApB,EAA6BC,gBAA7B,EAA+CY,eAA/C,EAAgEC,eAAhE,CAAlB;AACA,MAAIM,eAAeJ,sBAAUK,UAAV,CAAqBpB,gBAArB,EAAuCY,eAAvC,EAAwDC,eAAxD,CAAnB;;AAEA,MAAIZ,YAAY,OAAhB,EAAyB;AACvB,WAAO;AACL,iBAAW,YADN;AAEL,eAASc,sBAAUM,UAAV,CAAqBtB,UAAUC,gBAA/B;AAFJ,KAAP;AAID,GALD,MAKO,IAAIC,YAAY,gBAAhB,EAAkC;AACvC,WAAO;AACL,iBAAW,OADN;AAEL,eAASa,WAAWQ,iBAFf;AAGL,eAASP,sBAAUM,UAAV,CAAqBJ,cAAcE,YAAnC,CAHJ;AAIL;AACA,sBAAgB;AACd,iBAASJ,sBAAUM,UAAV,CAAqBJ,WAArB;AADK;AALX,KAAP;AASD,GAVM,MAUA;AAAA;;AACL;AACE,iBAAW,OADb;AAEE,eAASH,WAAWQ;AAFtB,yCAGaR,WAAWZ,SAHxB,EAGsCa,sBAAUM,UAAV,CAAqBF,YAArB,CAHtC,yBAIE,OAJF,EAIWJ,sBAAUM,UAAV,CAAqBJ,WAArB,CAJX,yBAME,cANF,kCAOeH,WAAWZ,SAP1B,EAOwC,CAPxC;AAUD;AACF,CAxCD;;kBA0CeJ,W","file":"grid/span-columns.es6.js","sourcesContent":["'use strict';\n\nimport variables from '../core/variables.es6.js';\nimport functions from '../core/functions.es6.js';\nimport Media from '../core/mediaTypes.es6';\n\n// Specifies the number of columns an element should span. If the selector is nested the number of columns\n// of its parent element should be passed as an argument as well.\n//\n// @columns\n//   The unitless number of columns the element spans. If is not passed, it is equal to `@neatElementColumns`.\n//   `@columns` also accepts decimals for when it's necessary to break out of the standard grid.\n//   E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n//\n// @container-columns\n//   The number of columns the parent element spans. If is not passed, it is equal to `@neatGridColumns`,\n//   the total number of columns in the grid.\n//\n// @display\n//   Sets the display property of the element. By default it sets the display property of the element to `block`.\n//   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n//   If passed `table`, it sets the display property to `table-cell` and calculates the width of the\n//   element without taking gutters into consideration. The result does not align with the block-based grid.\n//\n// @example - PostCSS Usage\n//   .element {\n//     @neat-span-columns 6;\n//\n//    .nested-element {\n//      @neat-span-columns 2 6;\n//    }\n//  }\n//\n// @example - CSS Output\n//   .element {\n//     display: block;\n//     float: left;\n//     margin-right: 2.3576516%;\n//     width: 48.8211742%;\n//   }\n//\n//   .element:last-child {\n//     margin-right: 0;\n//   }\n//\n//   .element .nested-element {\n//     display: block;\n//     float: left;\n//     margin-right: 4.82915791%;\n//     width: 30.11389472%;\n//   }\n//\n//   .element .nested-element:last-child {\n//     margin-right: 0;\n//   }\n//\n\nlet spanColumns = (columns, containerColumns, display, direction, options = variables, media) => {\n  columns = columns || (media ? options[media].neatElementColumns : options[Media.Desktop].neatElementColumns);\n  containerColumns = containerColumns || (media ? options[media].neatGridColumns : options[Media.Desktop].neatGridColumns);\n  display = display || (media ? options[media].neatDefaultDisplay : options[Media.Desktop].neatDefaultDisplay);\n  direction = direction || (media ? options[media].neatDefaultDirection : options[Media.Desktop].neatDefaultDirection);\n\n  let neatColumnWidth = (media ? options[media].neatColumnWidth : options[Media.Desktop].neatColumnWidth);\n  let neatGutterWidth = (media ? options[media].neatGutterWidth : options[Media.Desktop].neatGutterWidth);\n\n  let directions = functions.getDirection(direction);\n  let columnWidth = functions.flexWidth(columns, containerColumns, neatColumnWidth, neatGutterWidth);\n  let columnGutter = functions.flexGutter(containerColumns, neatColumnWidth, neatGutterWidth);\n\n  if (display === 'table') {\n    return {\n      'display': 'table-cell',\n      'width': functions.percentage(columns / containerColumns)\n    };\n  } else if (display === 'block-collapse') {\n    return {\n      'display': 'block',\n      'float': directions.oppositeDirection,\n      'width': functions.percentage(columnWidth + columnGutter),\n      // ---\n      '&:last-child': {\n        'width': functions.percentage(columnWidth)\n      }\n    };\n  } else {\n    return {\n      'display': 'block',\n      'float': directions.oppositeDirection,\n      [`margin-${directions.direction}`]: functions.percentage(columnGutter),\n      'width': functions.percentage(columnWidth),\n      // ---\n      '&:last-child': {\n        [`margin-${directions.direction}`]: 0\n      }\n    };\n  }\n};\n\nexport default spanColumns;\n"],"sourceRoot":"/source/"}