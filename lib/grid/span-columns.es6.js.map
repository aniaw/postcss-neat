{"version":3,"sources":["grid/span-columns.es6.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;kCAES,0BAA0B;;;;kCAC1B,0BAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDhD,IAAI,WAAW,GAAG,SAAd,WAAW,CAAI,OAAO,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAA0B;MAAxB,OAAO;;AACvE,kBAAgB,GAAG,gBAAgB,IAAI,OAAO,CAAC,eAAe,CAAC;AAC/D,SAAO,GAAG,OAAO,IAAI,OAAO,CAAC,kBAAkB,CAAC;AAChD,WAAS,GAAG,SAAS,IAAI,OAAO,CAAC,oBAAoB,CAAC;;AAEtD,MAAI,UAAU,GAAG,gCAAU,YAAY,CAAC,SAAS,CAAC,CAAC;AACnD,MAAI,WAAW,GAAG,gCAAU,SAAS,CAAC,OAAO,EAAE,gBAAgB,EAAE,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;AACnH,MAAI,YAAY,GAAG,gCAAU,UAAU,CAAC,gBAAgB,EAAE,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;;AAE5G,MAAI,OAAO,KAAK,OAAO,EAAE;AACvB,WAAO;AACL,eAAS,EAAE,YAAY;AACvB,aAAO,EAAE,gCAAU,UAAU,CAAC,OAAO,GAAG,gBAAgB,CAAC;KAC1D,CAAC;GACH,MAAM,IAAI,OAAO,KAAK,gBAAgB,EAAE;AACvC,WAAO;AACL,eAAS,EAAE,OAAO;AAClB,aAAO,EAAE,UAAU,CAAC,iBAAiB;AACrC,aAAO,EAAE,gCAAU,UAAU,CAAC,WAAW,GAAG,YAAY,CAAC;;AAEzD,oBAAc,EAAE;AACd,eAAO,EAAE,gCAAU,UAAU,CAAC,WAAW,CAAC;OAC3C;KACF,CAAC;GACH,MAAM;;;AACL;AACE,eAAS,EAAE,OAAO;AAClB,aAAO,EAAE,UAAU,CAAC,iBAAiB;yCAC1B,UAAU,CAAC,SAAS,EAAK,gCAAU,UAAU,CAAC,YAAY,CAAC,yBACtE,OAAO,EAAE,gCAAU,UAAU,CAAC,WAAW,CAAC,yBAE1C,cAAc,kCACD,UAAU,CAAC,SAAS,EAAK,CAAC,UAEvC;GACH;CACF,CAAC;;qBAEa,WAAW","file":"grid/span-columns.es6.js","sourcesContent":["'use strict';\n\nimport variables from '../core/variables.es6.js';\nimport functions from '../core/functions.es6.js';\n\n// Specifies the number of columns an element should span. If the selector is nested the number of columns\n// of its parent element should be passed as an argument as well.\n//\n// @columns\n//   The unitless number of columns the element spans (required).\n//   `@columns` also accepts decimals for when it's necessary to break out of the standard grid.\n//   E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n//\n// @container-columns\n//   The number of columns the parent element spans. If is not passed, it is equal to `@neat-grid-columns`,\n//   the total number of columns in the grid.\n//\n// @display\n//   Sets the display property of the element. By default it sets the display property of the element to `block`.\n//   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n//   If passed `table`, it sets the display property to `table-cell` and calculates the width of the\n//   element without taking gutters into consideration. The result does not align with the block-based grid.\n//\n// @example - LESS Usage\n//   .element {\n//     @mixin span-columns 6;\n//\n//    .nested-element {\n//      @mixin span-columns 2 6;\n//    }\n//  }\n//\n// @example - CSS Output\n//   .element {\n//     display: block;\n//     float: left;\n//     margin-right: 2.3576516%;\n//     width: 48.8211742%;\n//   }\n//\n//   .element:last-child {\n//     margin-right: 0;\n//   }\n//\n//   .element .nested-element {\n//     display: block;\n//     float: left;\n//     margin-right: 4.82915791%;\n//     width: 30.11389472%;\n//   }\n//\n//   .element .nested-element:last-child {\n//     margin-right: 0;\n//   }\n\nlet spanColumns = (columns, containerColumns, display, direction, options = variables) => {\n  containerColumns = containerColumns || options.neatGridColumns;\n  display = display || options.neatDefaultDisplay;\n  direction = direction || options.neatDefaultDirection;\n\n  var directions = functions.getDirection(direction);\n  var columnWidth = functions.flexWidth(columns, containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n  var columnGutter = functions.flexGutter(containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n\n  if (display === 'table') {\n    return {\n      'display': 'table-cell',\n      'width': functions.percentage(columns / containerColumns)\n    };\n  } else if (display === 'block-collapse') {\n    return {\n      'display': 'block',\n      'float': directions.oppositeDirection,\n      'width': functions.percentage(columnWidth + columnGutter),\n\n      '&:last-child': {\n        'width': functions.percentage(columnWidth)\n      }\n    };\n  } else {\n    return {\n      'display': 'block',\n      'float': directions.oppositeDirection,\n      [`margin-${directions.direction}`]: functions.percentage(columnGutter),\n      'width': functions.percentage(columnWidth),\n\n      '&:last-child': {\n        [`margin-${directions.direction}`]: 0\n      }\n    };\n  }\n};\n\nexport default spanColumns;\n"],"sourceRoot":"/source/"}